{"version":3,"file":"static/js/111.80cca5b8.chunk.js","mappings":"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","sources":["components/Categories/CategoriesDetails/CategoriesDetails.jsx","components/Search/Search.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\r\n\r\nimport {\r\n    DetailsNav,\r\n    DetailsFilters,\r\n    DetailsAllProducts,\r\n    getSizeCountsInProducts,\r\n    getAllColors,\r\n    getAllSizes,\r\n    filterProducts,\r\n    setFilter,\r\n    removeFilter,\r\n    getColorCountsInProducts,\r\n} from \"../../UsefullComponents/Usefull\"\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { setMobileFiltersOn } from \"../../../store/slices/filters/filtersSlice\"\r\n\r\nfunction CategoriesDetails({ dataObject, origin }) {\r\n\r\n    const dispatch = useDispatch()\r\n    const isMobile = useSelector((state) => state.mobile.isMobile)\r\n    const mobileFiltersOn = useSelector((state) => state.filters.mobileFiltersOn)\r\n\r\n    const handleFilterButtonClick = () => {\r\n        dispatch(setMobileFiltersOn(!mobileFiltersOn))\r\n    }\r\n\r\n    const [products] = useState(dataObject.products)\r\n    const [initialsPrices] = useState(products.reduce((range, product) => ({\r\n        min: Math.min(1, product.discountedPrice),\r\n        max: Math.max(range.max, product.discountedPrice),\r\n    }), { min: 0, max: 1 }))\r\n\r\n    const [allSizes] = useState(getAllSizes(products))\r\n    const [allColors] = useState(getAllColors(products))\r\n    const [uniqueColors] = useState([...new Set(allColors)])\r\n    const [uniqueColorsCount] = useState(getColorCountsInProducts(products, uniqueColors))\r\n\r\n    const [uniqueSizes] = useState([...new Set(allSizes)])\r\n    const [uniqueSizesCount] = useState(getSizeCountsInProducts(products, uniqueSizes))\r\n\r\n    const [allManufacturers] = useState(\r\n        products.reduce((counts, product) => {\r\n            counts[product.manufacturer?.name] = (counts[product.manufacturer?.name] || 0) + 1\r\n            return counts\r\n        }, {})\r\n    )\r\n\r\n    const [currentFilters, setCurrentFilters] = useState(null)\r\n    const [filteredProducts, setFilteredProducts] = useState([])\r\n    const [previousFilters, setPreviousFilters] = useState(null)\r\n    const [uniqueFilterColors, setUniqueFilterColors] = useState([])\r\n    const [uniqueFilterSizes, setUniqueFilterSizes] = useState([])\r\n    const [filteredManufacturers, setFilteredManufacturers] = useState([])\r\n    const [currentSort, setCurrentSort] = useState({ sort: 'price', order: 'asc' })\r\n\r\n    useEffect(() => {\r\n        if (currentFilters && Object.keys(currentFilters).length > 0) {\r\n            const tempFilteredProducts = filterProducts(products, currentFilters)\r\n            setFilteredProducts(tempFilteredProducts)\r\n            if (!isMobile) {\r\n                setPreviousFilters(currentFilters)\r\n            }\r\n        } else {\r\n            setFilteredProducts([])\r\n        }\r\n    }, [isMobile, currentFilters, products])\r\n\r\n    useEffect(() => {\r\n        if (filteredProducts.length > 0) {\r\n            const allFilterColors = getAllColors(filteredProducts)\r\n            const allFilterSizes = getAllSizes(filteredProducts)\r\n            setUniqueFilterColors([...new Set(allFilterColors)])\r\n            setUniqueFilterSizes([...new Set(allFilterSizes)])\r\n            setFilteredManufacturers([\r\n                ...new Set(\r\n                    filteredProducts.map((product) => product.manufacturer?.name)\r\n                ),\r\n            ])\r\n        } else {\r\n            setUniqueFilterColors(uniqueColors)\r\n            setUniqueFilterSizes(uniqueSizes)\r\n            setFilteredManufacturers([\r\n                ...new Set(products.map((product) => product.manufacturer?.name)),\r\n            ])\r\n        }\r\n    }, [filteredProducts, uniqueColors, uniqueSizes, products])\r\n\r\n    const clearFilters = () => {\r\n        setCurrentFilters(null)\r\n    }\r\n\r\n    const sortFilters = (sort) => {\r\n        setCurrentSort(sort)\r\n    }\r\n\r\n    const handlePriceChange = (min, max) => {\r\n        const newPriceFilter = { from: min, to: max }\r\n        const updatedFiltersSet = setFilter(\r\n            currentFilters,\r\n            \"price\",\r\n            newPriceFilter\r\n        )\r\n        setCurrentFilters(updatedFiltersSet)\r\n    }\r\n\r\n    const handlePriceRemove = () => {\r\n        const updatedFiltersSet = removeFilter(currentFilters, \"price\", null)\r\n        setCurrentFilters(updatedFiltersSet)\r\n    }\r\n\r\n    const handleOtherFiltersRemove = (values, type) => {\r\n        const updatedFiltersRemove = removeFilter(currentFilters, type, values)\r\n        setCurrentFilters(updatedFiltersRemove)\r\n    }\r\n\r\n    const handleOtherFiltersAdd = (values, type) => {\r\n        const updatedFiltersAdd = setFilter(currentFilters, type, values)\r\n        setCurrentFilters(updatedFiltersAdd)\r\n    }\r\n\r\n    const handleCloseButtonClick = () => {\r\n        if (mobileFiltersOn) {\r\n            setCurrentFilters(previousFilters || null)\r\n        }\r\n        dispatch(setMobileFiltersOn(!mobileFiltersOn))\r\n    }\r\n\r\n    const applyFilters = () => {\r\n        dispatch(setMobileFiltersOn(!mobileFiltersOn))\r\n    }\r\n\r\n    return (\r\n        <main className=\"categoriesDetails\">\r\n            {origin !== \"search\" && (\r\n                <DetailsNav\r\n                    categoryid={dataObject?.category?.id || dataObject.products[0]?.category?.id}\r\n                    categorytitle={dataObject?.category?.name || dataObject.products[0]?.category?.name}\r\n                ></DetailsNav>\r\n            )}\r\n\r\n            <div className=\"detailsListBody\">\r\n                {(!isMobile || (isMobile && mobileFiltersOn)) && (\r\n                    <DetailsFilters\r\n                        origin={origin}\r\n                        products={products}\r\n                        initialsPrices={initialsPrices}\r\n                        uniqueColors={uniqueColors}\r\n                        uniqueColorsCount={uniqueColorsCount}\r\n                        uniqueSizes={uniqueSizes}\r\n                        uniqueSizesCount={uniqueSizesCount}\r\n                        allManufacturers={allManufacturers}\r\n                        currentFilters={currentFilters}\r\n                        filteredProducts={filteredProducts}\r\n                        uniqueFilterColors={uniqueFilterColors}\r\n                        uniqueFilterSizes={uniqueFilterSizes}\r\n                        filteredManufacturers={filteredManufacturers}\r\n                        handlePriceChange={handlePriceChange}\r\n                        handlePriceRemove={handlePriceRemove}\r\n                        handleOtherFiltersRemove={handleOtherFiltersRemove}\r\n                        handleOtherFiltersAdd={handleOtherFiltersAdd}\r\n                        handleCloseButtonClick={handleCloseButtonClick}\r\n                        clearFilters={clearFilters}\r\n                        applyFilters={applyFilters}\r\n                    ></DetailsFilters>\r\n                )}\r\n                <DetailsAllProducts\r\n                    dataObject={dataObject}\r\n                    origin={origin}\r\n                    initialProducts={products}\r\n                    currentFilters={currentFilters}\r\n                    filteredProducts={filteredProducts}\r\n                    handlePriceRemove={handlePriceRemove}\r\n                    handleOtherFiltersRemove={handleOtherFiltersRemove}\r\n                    clearFilters={clearFilters}\r\n                    sortFilters={sortFilters}\r\n                    currentSort={currentSort}\r\n                ></DetailsAllProducts>\r\n            </div>\r\n\r\n            {isMobile && (\r\n                <button className=\"filtersButton\" onClick={handleFilterButtonClick}>\r\n                    <svg viewBox=\"0 0 32 32\">\r\n                        <path\r\n                            d=\"M26 6H4v3.17l7.41 7.42l.59.58V26h4v-2h2v2a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-8l-7.41-7.41A2 2 0 0 1 2 9.17V6a2 2 0 0 1 2-2h22z\"\r\n                            fill=\"currentColor\"\r\n                        />\r\n                        <path\r\n                            d=\"M29.71 11.29l-3-3a1 1 0 0 0-1.42 0L16 17.59V22h4.41l9.3-9.29a1 1 0 0 0 0-1.42zM19.59 20H18v-1.59l5-5L24.59 15zM26 13.59L24.41 12L26 10.41L27.59 12z\"\r\n                            fill=\"currentColor\"\r\n                        />\r\n                    </svg>\r\n                </button>\r\n            )}\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default CategoriesDetails\r\n","import React from 'react'\r\nimport CategoriesDetails from '../Categories/CategoriesDetails/CategoriesDetails'\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { useParams } from 'react-router-dom'\r\nimport NotFound from '../NotFound/NotFound'\r\nimport { BigLoadingDiv } from '../PageLoader/PageLoader'\r\nimport { getSearch } from '../../helpers/API/searchApi'\r\n\r\nfunction Search() {\r\n    const { searchid } = useParams()\r\n    const {\r\n        data: searchData,\r\n        error: searchError,\r\n        isError: isSearchError,\r\n        isPending: isSearchPending,\r\n        isSuccess: searchSuccess,\r\n        refetch: searchRefetch\r\n    } = useQuery({\r\n        queryKey: [\"searchQuery\", searchid],\r\n        queryFn: () => getSearch(searchid),\r\n    })\r\n    return (\r\n        <>\r\n            {\r\n                isSearchPending ? (\r\n                    <BigLoadingDiv\r\n                    link={\"/store/\"}\r\n                        title={\"getting search results...\"}\r\n                        message={\"you can click here to retry if its taking too long\"}\r\n                        refetch={searchRefetch}\r\n                    ></BigLoadingDiv>\r\n                ) : searchSuccess && searchData ? (\r\n                    <CategoriesDetails origin={'search'} dataObject={{\r\n                        name: searchid,\r\n                        products: searchData\r\n                    }}></CategoriesDetails>\r\n                ) : isSearchError ? (\r\n                    <NotFound\r\n                    link={\"/store/\"}\r\n                        title={\"no results found\"}\r\n                        message={searchError.message}\r\n                    ></NotFound>\r\n                ) : (<></>)\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Search"],"names":["_ref","_dataObject$category","_dataObject$products$","_dataObject$products$2","_dataObject$category2","_dataObject$products$3","_dataObject$products$4","dataObject","origin","dispatch","useDispatch","isMobile","useSelector","state","mobile","mobileFiltersOn","filters","products","useState","initialsPrices","reduce","range","product","min","Math","discountedPrice","max","allSizes","getAllSizes","allColors","getAllColors","uniqueColors","Set","uniqueColorsCount","getColorCountsInProducts","uniqueSizes","uniqueSizesCount","getSizeCountsInProducts","allManufacturers","counts","_product$manufacturer","_product$manufacturer2","manufacturer","name","currentFilters","setCurrentFilters","filteredProducts","setFilteredProducts","previousFilters","setPreviousFilters","uniqueFilterColors","setUniqueFilterColors","uniqueFilterSizes","setUniqueFilterSizes","filteredManufacturers","setFilteredManufacturers","currentSort","setCurrentSort","sort","order","useEffect","Object","keys","length","tempFilteredProducts","filterProducts","allFilterColors","allFilterSizes","map","_product$manufacturer3","_product$manufacturer4","clearFilters","handlePriceRemove","updatedFiltersSet","removeFilter","handleOtherFiltersRemove","values","type","updatedFiltersRemove","_jsxs","className","children","_jsx","DetailsNav","categoryid","category","id","categorytitle","DetailsFilters","handlePriceChange","newPriceFilter","from","to","setFilter","handleOtherFiltersAdd","updatedFiltersAdd","handleCloseButtonClick","setMobileFiltersOn","applyFilters","DetailsAllProducts","initialProducts","sortFilters","onClick","handleFilterButtonClick","viewBox","d","fill","searchid","useParams","data","searchData","error","searchError","isError","isSearchError","isPending","isSearchPending","isSuccess","searchSuccess","refetch","searchRefetch","useQuery","queryKey","queryFn","getSearch","_Fragment","BigLoadingDiv","link","title","message","CategoriesDetails","NotFound"],"sourceRoot":""}