{"version":3,"file":"static/js/278.4b8a99f6.chunk.js","mappings":"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","sources":["components/CourierDashboard/CourierDashboard.jsx"],"sourcesContent":["import React from \"react\"\r\nimport Order from \"../Order/Order\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { useQuery } from \"@tanstack/react-query\"\r\nimport { getUser } from \"../../helpers/API/user-api\"\r\nimport { getPurchasedOrders } from \"../../helpers/API/order-api\"\r\nimport { LoadingErrorDiv } from \"../PageLoader/PageLoader\"\r\n\r\nfunction CourierDashboard() {\r\n  const tokens = useSelector(state => state.role.authTokens)\r\n  const userid = useSelector(state => state.role.userid)\r\n\r\n  const {\r\n    data: userData,\r\n    isSuccess: userSuccess,\r\n  } = useQuery({\r\n    queryKey: ['userQuery', userid],\r\n    queryFn: () => getUser(userid, tokens),\r\n    enabled: !!(tokens?.accessToken && tokens?.refreshToken && userid?.length > 0)\r\n  })\r\n\r\n  const {\r\n    data: purchasedOrders,\r\n    error: pOrderError,\r\n    isError: isPOrdersError,\r\n    isPending: isPOrdersPending,\r\n    isSuccess: pOrdersSuccess,\r\n    refetch: pOrdersRefetch,\r\n  } = useQuery({\r\n    queryKey: [\"purchasedOrders\"],\r\n    queryFn: () => getPurchasedOrders(tokens),\r\n  })\r\n\r\n  return (\r\n    <main className=\"courierMain\">\r\n      <div className=\"orderList all\">\r\n        <h1 className=\"title\">Available Orders</h1>\r\n        {isPOrdersPending || isPOrdersError ? (\r\n          <LoadingErrorDiv\r\n            isError={isPOrdersError}\r\n            classTitle={\"pOrders\"}\r\n            errorMessage={pOrderError?.message}\r\n            refetch={pOrdersRefetch}\r\n            loadMessage={\"Loading Available Orders...\"}\r\n          ></LoadingErrorDiv>\r\n        ) : pOrdersSuccess ? (\r\n          <ul className=\"orderUl\">\r\n            {purchasedOrders?.length && purchasedOrders?.map((e) =>\r\n              <Order key={e.id} order={e} userId={userData.id}></Order>\r\n            )}\r\n          </ul>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n\r\n      {userSuccess && userData?.userOrders?.length > 0 ? (\r\n        <>\r\n          {userData.userOrders?.some(order => order.status === 'OnTheWay') ? (\r\n            <div className=\"orderList pending\">\r\n              <h2 className=\"title\">Pending Orders</h2>\r\n              <ul className=\"orderUl\">\r\n                {userData.userOrders?.filter(order => order.status === 'OnTheWay').map((e) =>\r\n                  <Order key={e.id} order={e}></Order>\r\n                )}\r\n              </ul>\r\n            </div>\r\n          ) : (\r\n            <div className=\"noDataDiv\">\r\n              <h1 className=\"title\">No Pending Orders found</h1>\r\n            </div>\r\n          )}\r\n          {userData.userOrders?.some(order => order.status === 'Delivered') ? (\r\n            <div className=\"orderList completed\">\r\n              <h2 className=\"title\">Completed Orders</h2>\r\n              <ul className=\"orderUl\">\r\n                {userData.userOrders?.filter(order => order.status === 'Delivered').map((e) =>\r\n                  <Order key={e.id} order={e}></Order>\r\n                )}\r\n              </ul>\r\n            </div>\r\n          ) : (\r\n            <div className=\"noDataDiv\">\r\n              <h1 className=\"title\">No Competed Orders found</h1>\r\n            </div>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <div className=\"noDataDiv\">\r\n          <h1 className=\"title\">No orders found</h1>\r\n          <p className=\"subTitle\">Orders you've accepted or completed will show up here</p>\r\n        </div>\r\n      )}\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default CourierDashboard\r\n"],"names":["_userData$userOrders","_userData$userOrders2","_userData$userOrders3","_userData$userOrders4","_userData$userOrders5","tokens","useSelector","state","role","authTokens","userid","data","userData","isSuccess","userSuccess","useQuery","queryKey","queryFn","getUser","enabled","accessToken","refreshToken","length","purchasedOrders","error","pOrderError","isError","isPOrdersError","isPending","isPOrdersPending","pOrdersSuccess","refetch","pOrdersRefetch","getPurchasedOrders","_jsxs","className","children","_jsx","LoadingErrorDiv","classTitle","errorMessage","message","loadMessage","map","e","Order","order","userId","id","_Fragment","userOrders","some","status","filter"],"sourceRoot":""}