{"version":3,"file":"static/js/497.1ff010ae.chunk.js","mappings":"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","sources":["components/Notification/Notification.jsx"],"sourcesContent":["import React, { useRef, useEffect } from \"react\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { CSSTransition } from \"react-transition-group\"\r\nimport { clearNotification, setShowNotification } from \"../../store/slices/notificationSlice/notificationSlice\"\r\n\r\nfunction Notification() {\r\n    const dispatch = useDispatch()\r\n    const notificationRef = useRef()\r\n    const showNotification = useSelector((state) => state.notification.showNotification)\r\n    const notificationTitle = useSelector((state) => state.notification.title)\r\n    const notificationSuccess = useSelector((state) => state.notification.success)\r\n    const notificationError = useSelector((state) => state.notification.error)\r\n\r\n    useEffect(() => {\r\n        if (showNotification) {\r\n            const timer = setTimeout(() => {\r\n                dispatch(setShowNotification(false))\r\n                dispatch(clearNotification())\r\n            }, 2700)\r\n\r\n            return () => {\r\n                clearTimeout(timer)\r\n            }\r\n        }\r\n    }, [showNotification, dispatch])\r\n\r\n    const handleNotificationClick = () => dispatch(setShowNotification(false))\r\n\r\n    return (\r\n        <CSSTransition\r\n            in={!!(showNotification && notificationTitle)}\r\n            timeout={200}\r\n            classNames=\"notification\"\r\n            unmountOnExit\r\n            nodeRef={notificationRef}\r\n        >\r\n            <div ref={notificationRef} className={`notification ${notificationError ? \"errorNotify\" : \"successNotify\"}`} onClick={handleNotificationClick}>\r\n                <h3>\r\n                    {notificationError ?\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\"><path fill=\"currentColor\" d=\"M16 2C8.2 2 2 8.2 2 16s6.2 14 14 14s14-6.2 14-14S23.8 2 16 2m0 26C9.4 28 4 22.6 4 16S9.4 4 16 4s12 5.4 12 12s-5.4 12-12 12\" /><path fill=\"currentColor\" d=\"M21.4 23L16 17.6L10.6 23L9 21.4l5.4-5.4L9 10.6L10.6 9l5.4 5.4L21.4 9l1.6 1.6l-5.4 5.4l5.4 5.4z\" /></svg>\r\n                        :\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\"><path fill=\"currentColor\" d=\"m14 21.414l-5-5.001L10.413 15L14 18.586L21.585 11L23 12.415z\" /><path fill=\"currentColor\" d=\"M16 2a14 14 0 1 0 14 14A14 14 0 0 0 16 2m0 26a12 12 0 1 1 12-12a12 12 0 0 1-12 12\" /></svg>\r\n                    }\r\n                    <span>{notificationTitle}</span>\r\n                </h3>\r\n                <p>{notificationError || notificationSuccess}</p>\r\n            </div>\r\n        </CSSTransition>\r\n    )\r\n}\r\n\r\nexport function LoginNotification() {\r\n    const dispatch = useDispatch()\r\n    const loginnotificationRef = useRef()\r\n    const showNotification = useSelector((state) => state.notification.showNotification)\r\n    const notificationTitle = useSelector((state) => state.notification.title)\r\n    const notificationSuccess = useSelector((state) => state.notification.success)\r\n    const notificationError = useSelector((state) => state.notification.error)\r\n\r\n    useEffect(() => {\r\n        if (showNotification) {\r\n            const timer = setTimeout(() => {\r\n                dispatch(setShowNotification(false))\r\n                dispatch(clearNotification())\r\n            }, 2700)\r\n\r\n            return () => {\r\n                clearTimeout(timer)\r\n            }\r\n        }\r\n    }, [showNotification, dispatch])\r\n\r\n    const handleNotificationClick = () => {\r\n        dispatch(setShowNotification(false))\r\n        dispatch(clearNotification())\r\n    }\r\n\r\n    return (\r\n        <CSSTransition\r\n            in={!!(showNotification && notificationTitle)}\r\n            timeout={200}\r\n            classNames=\"notificationLogin\"\r\n            unmountOnExit\r\n            nodeRef={loginnotificationRef}\r\n        >\r\n            <div ref={loginnotificationRef} className={`notificationLogin ${notificationError ? \"errorNotify\" : \"successNotify\"}`} onClick={handleNotificationClick}>\r\n                <h3>\r\n                    {notificationError ?\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\"><path fill=\"currentColor\" d=\"M16 2C8.2 2 2 8.2 2 16s6.2 14 14 14s14-6.2 14-14S23.8 2 16 2m0 26C9.4 28 4 22.6 4 16S9.4 4 16 4s12 5.4 12 12s-5.4 12-12 12\" /><path fill=\"currentColor\" d=\"M21.4 23L16 17.6L10.6 23L9 21.4l5.4-5.4L9 10.6L10.6 9l5.4 5.4L21.4 9l1.6 1.6l-5.4 5.4l5.4 5.4z\" /></svg>\r\n                        :\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\"><path fill=\"currentColor\" d=\"m14 21.414l-5-5.001L10.413 15L14 18.586L21.585 11L23 12.415z\" /><path fill=\"currentColor\" d=\"M16 2a14 14 0 1 0 14 14A14 14 0 0 0 16 2m0 26a12 12 0 1 1 12-12a12 12 0 0 1-12 12\" /></svg>\r\n                    }\r\n                    <span>{notificationTitle}</span>\r\n                </h3>\r\n                <p>{notificationError || notificationSuccess}</p>\r\n            </div>\r\n        </CSSTransition>\r\n    )\r\n}\r\n\r\nexport default Notification"],"names":["LoginNotification","dispatch","useDispatch","loginnotificationRef","useRef","showNotification","useSelector","state","notification","notificationTitle","title","notificationSuccess","success","notificationError","error","useEffect","timer","setTimeout","setShowNotification","clearNotification","clearTimeout","_jsx","CSSTransition","in","timeout","classNames","unmountOnExit","nodeRef","children","_jsxs","ref","className","concat","onClick","handleNotificationClick","xmlns","width","height","viewBox","fill","d","notificationRef"],"sourceRoot":""}